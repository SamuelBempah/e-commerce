### **1. Fetch All Products (GET)**
```powershell
Invoke-WebRequest -Uri "http://localhost:3000/products" -Method GET | Select-Object -ExpandProperty Content
```

### **2. Filter Products by Name (GET)**
```powershell
Invoke-WebRequest -Uri "http://localhost:3000/products?name={name}" -Method GET | Select-Object -ExpandProperty Content
```

### **3. Filter Products by Category (GET)**
```powershell
Invoke-WebRequest -Uri "http://localhost:3000/products?category={category}" -Method GET | Select-Object -ExpandProperty Content
```

### **4. Add New Product (POST)**
```powershell
$product = @{ name="{product_name}"; category="{category}"; price={price}; image="{image_url}" } | ConvertTo-Json
Invoke-WebRequest -Uri "http://localhost:3000/products" -Method POST -Body $product -ContentType "application/json" | Select-Object -ExpandProperty Content
```

### **5. View Cart (GET)**
```powershell
Invoke-WebRequest -Uri "http://localhost:3000/cart" -Method GET | Select-Object -ExpandProperty Content
```

### **6. Add Item to Cart (POST)**
```powershell
$cartItem = @{ productId={product_id}; quantity={quantity} } | ConvertTo-Json
Invoke-WebRequest -Uri "http://localhost:3000/cart" -Method POST -Body $cartItem -ContentType "application/json" | Select-Object -ExpandProperty Content
```

### **7. Clear Cart (DELETE)**
```powershell
Invoke-WebRequest -Uri "http://localhost:3000/cart" -Method DELETE | Select-Object -ExpandProperty Content
```

### **8. Create Order (POST)**
```powershell
Invoke-WebRequest -Uri "http://localhost:3000/orders" -Method POST | Select-Object -ExpandProperty Content
```

### **9. View All Orders (GET)**
```powershell
Invoke-WebRequest -Uri "http://localhost:3000/orders" -Method GET | Select-Object -ExpandProperty Content
```

---



















Here's a simple explanation of each part of the commands, broken down piece by piece:

---

### **1. `Invoke-WebRequest`**  
This is PowerShell's way of sending web requests (like a browser does). It can fetch data (GET), send data (POST), or delete data (DELETE).

---

### **2. `-Uri "http://localhost:3000/products"`**  
- `-Uri` = The web address (URL) you're targeting.  
- `http://localhost:3000` = Your server running on your own computer (`localhost`) on port `3000`.  
- `/products` = The specific part of the API that handles products.  

---

### **3. `-Method GET/POST/DELETE`**  
- `GET` = Retrieve data (like loading a webpage).  
- `POST` = Send new data (like submitting a form).  
- `DELETE` = Remove data (like clearing a cart).  

---

### **4. `| Select-Object -ExpandProperty Content`**  
- `|` = Passes the result to the next command.  
- `Select-Object -ExpandProperty Content` = Extracts just the response data (like the list of products) from the web request.  

---

### **5. `$product = @{...} | ConvertTo-Json`**  
- `$product` = Stores data in a variable.  
- `@{...}` = Defines a PowerShell "dictionary" (key-value pairs) with product details.  
- `ConvertTo-Json` = Converts the data into JSON format (the standard way APIs send/receive data).  

---

### **6. `-Body $product`**  
- Attaches the JSON data (`$product`) to the request (used for `POST`).  

---

### **7. `-ContentType "application/json"`**  
- Tells the server: "I'm sending JSON data!" (required for `POST`).  

---

### **Summary of Each Command’s Purpose:**  

| **Command**                                                                 | **What It Does**                                                                 |
|-----------------------------------------------------------------------------|----------------------------------------------------------------------------------|
| `GET /products`                                                             | Fetches all products.                                                            |
| `GET /products?name={name}`                                                 | Filters products by name (replace `{name}`).                                     |
| `GET /products?category={category}`                                         | Filters products by category (replace `{category}`).                             |
| `POST /products` with `name`, `category`, `price`, `image`                  | Adds a new product (fill in the `{...}` placeholders).                           |
| `GET /cart`                                                                 | Shows items in your cart.                                                        |
| `POST /cart` with `productId` and `quantity`                                | Adds an item to the cart (replace `{product_id}` and `{quantity}`).              |
| `DELETE /cart`                                                              | Empties the cart.                                                                |
| `POST /orders`                                                              | Converts cart items into an order (checkout).                                    |
| `GET /orders`                                                               | Lists all past orders.                                                           |

---

### **Example Walkthrough:**  
If you run:  
```powershell
Invoke-WebRequest -Uri "http://localhost:3000/products" -Method GET | Select-Object -ExpandProperty Content
```  
It:  
1. Sends a `GET` request to your server at `http://localhost:3000/products`.  
2. Returns a list of products (like `[{"name":"iPhone", "price":999}]`).  

---

















### Simple Answer
Yes, I can give you cURL commands alongside `Invoke-WebRequest` for your e-commerce site’s endpoints. Here’s an example for `GET /products`:
- **cURL**: `curl http://localhost:3000/products`
- **Invoke-WebRequest**: `Invoke-WebRequest -Uri "http://localhost:3000/products" -Method GET`

I’ll provide both for all endpoints below.

---

### Detailed Answer
I’ll list cURL and `Invoke-WebRequest` commands for each endpoint in your `server.js` (`GET /products`, `POST /products`, `GET /cart`, `POST /cart`, `DELETE /cart`, `POST /orders`, `GET /orders`). These reference your latest `server.js` (lines noted from the version before MongoDB was considered). Run cURL in a terminal (e.g., Command Prompt, Terminal, or Git Bash) and `Invoke-WebRequest` in PowerShell, with `server.js` running (`node server.js`).

#### 1. Fetch Products (`GET /products`)
- **Purpose**: Get all products (lines 14-29).
- **cURL**:
  ```bash
  curl http://localhost:3000/products
  ```
- **Invoke-WebRequest**:
  ```powershell
  Invoke-WebRequest -Uri "http://localhost:3000/products" -Method GET
  ```
- **With Query (e.g., search "shirt")**:
  - **cURL**: `curl "http://localhost:3000/products?name=shirt"`
  - **Invoke-WebRequest**: `Invoke-WebRequest -Uri "http://localhost:3000/products?name=shirt" -Method GET`
- **Output**: JSON array of products (e.g., `[{"id":1,"name":"Shirt",...}]`).

#### 2. Add a Product (`POST /products`)
- **Purpose**: Add a new product (lines 30-41).
- **cURL**:
  ```bash
  curl -X POST http://localhost:3000/products -H "Content-Type: application/json" -d "{\"name\":\"Shirt\",\"category\":\"Clothing\",\"price\":19.99,\"image\":\"https://example.com/shirt.jpg\"}"
  ```
- **Invoke-WebRequest**:
  ```powershell
  $headers = @{"Content-Type" = "application/json"}
  $body = @{"name"="Shirt";"category"="Clothing";"price"=19.99;"image"="https://example.com/shirt.jpg"} | ConvertTo-Json
  Invoke-WebRequest -Uri "http://localhost:3000/products" -Method POST -Headers $headers -Body $body
  ```
- **Output**: New product with `id` (e.g., `{"id":1,"name":"Shirt",...}`).

#### 3. Fetch Cart (`GET /cart`)
- **Purpose**: Get cart contents (lines 64-66).
- **cURL**:
  ```bash
  curl http://localhost:3000/cart
  ```
- **Invoke-WebRequest**:
  ```powershell
  Invoke-WebRequest -Uri "http://localhost:3000/cart" -Method GET
  ```
- **Output**: JSON array of cart items (e.g., `[{"productId":1,"quantity":1}]`).

#### 4. Add to Cart (`POST /cart`)
- **Purpose**: Add/update cart item (lines 42-63).
- **cURL**:
  ```bash
  curl -X POST http://localhost:3000/cart -H "Content-Type: application/json" -d "{\"productId\":1,\"quantity\":1}"
  ```
- **Invoke-WebRequest**:
  ```powershell
  $headers = @{"Content-Type" = "application/json"}
  $body = @{"productId"=1;"quantity"=1} | ConvertTo-Json
  Invoke-WebRequest -Uri "http://localhost:3000/cart" -Method POST -Headers $headers -Body $body
  ```
- **Output**: Updated cart array.

#### 5. Clear Cart (`DELETE /cart`)
- **Purpose**: Empty the cart (lines 67-70).
- **cURL**:
  ```bash
  curl -X DELETE http://localhost:3000/cart
  ```
- **Invoke-WebRequest**:
  ```powershell
  Invoke-WebRequest -Uri "http://localhost:3000/cart" -Method DELETE
  ```
- **Output**: `{"message":"cart cleared"}`.

#### 6. Place an Order (`POST /orders`)
- **Purpose**: Create order from cart (lines 71-93).
- **cURL**:
  ```bash
  curl -X POST http://localhost:3000/orders
  ```
- **Invoke-WebRequest**:
  ```powershell
  Invoke-WebRequest -Uri "http://localhost:3000/orders" -Method POST
  ```
- **Output**: New order (e.g., `{"orderId":1,"items":[...],"total":19.99}`).

#### 7. Fetch Orders (`GET /orders`)
- **Purpose**: Get all orders (lines 94-96).
- **cURL**:
  ```bash
  curl http://localhost:3000/orders
  ```
- **Invoke-WebRequest**:
  ```powershell
  Invoke-WebRequest -Uri "http://localhost:3000/orders" -Method GET
  ```
- **Output**: JSON array of orders.

---

### Notes
- **cURL Flags**:
  - `-X`: Specifies HTTP method (e.g., `POST`, `DELETE`).
  - `-H`: Sets headers (e.g., `Content-Type`).
  - `-d`: Sends data (JSON body).
- **Invoke-WebRequest**:
  - `-Uri`: Endpoint URL.
  - `-Method`: HTTP method.
  - `-Headers`/`-Body`: For `POST` requests.
- **Pretty JSON**:
  - cURL: Pipe to `jq` (if installed) like `curl http://localhost:3000/products | jq`.
  - PowerShell: Add `| Select-Object -ExpandProperty Content | ConvertFrom-Json` for parsed output.
- **Server Reference**: Matches your `server.js` endpoints (e.g., `GET /products` at lines 14-29).

These commands let you test your API with either cURL or PowerShell. Let me know if you need more!